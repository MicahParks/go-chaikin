package chaikin_test

import (
	"math/big"
)

var (
	chaikinResults = []float64{
		-3306562.81159986229613423347473144531250,
		-4765608.36442298907786607742309570312500,
		-6747708.51774772722274065017700195312500,
		-3912547.58891434129327535629272460937500,
		-302299.08588065858930349349975585937500,
		826102.97490851115435361862182617187500,
		2244667.18387600034475326538085937500000,
		3734857.16678810119628906250000000000000,
		2398447.87190776923671364784240722656250,
		1958648.30332369985990226268768310546875,
		2723315.30072200857102870941162109375000,
		4461448.13595572020858526229858398437500,
		7000806.32082437165081501007080078125000,
		6553444.01191470678895711898803710937500,
		7075055.59420748613774776458740234375000,
		8968476.95672099664807319641113281250000,
		6980577.30126413330435752868652343750000,
		5038169.97494323551654815673828125000000,
		4719637.75349555537104606628417968750000,
		4387538.36473864503204822540283203125000,
		3127090.58163460344076156616210937500000,
		1318455.98112524114549160003662109375000,
		1222277.27369086444377899169921875000000,
		-340194.59431408718228340148925781250000,
		-812084.94083299115300178527832031250000,
		332361.95748498290777206420898437500000,
		1457272.59470990858972072601318359375000,
		1816435.88589488528668880462646484375000,
		2314190.33357102796435356140136718750000,
		2850683.57095324248075485229492187500000,
		3867339.94764492288231849670410156250000,
		2998651.42468744888901710510253906250000,
		748618.61658677458763122558593750000000,
		-73973.77005317062139511108398437500000,
		-3283023.89998823776841163635253906250000,
		-423268.18377121910452842712402343750000,
		2078320.80775129422545433044433593750000,
		3708447.74600281566381454467773437500000,
		4580822.29398948699235916137695312500000,
		4102682.58234859630465507507324218750000,
		984113.71134592592716217041015625000000,
		-1007615.40661083534359931945800781250000,
		-2971590.75043711438775062561035156250000,
		-6331692.73463645949959754943847656250000,
		-11006253.29775105789303779602050781250000,
		-16621788.85721225850284099578857421875000,
		-17170739.34837474673986434936523437500000,
		-11536125.18881431967020034790039062500000,
		-3651463.35143396351486444473266601562500,
		3204460.08026399789378046989440917968750,
		7313136.25296310149133205413818359375000,
		9630752.58555500581860542297363281250000,
		9363955.78526617586612701416015625000000,
		8557993.54619259014725685119628906250000,
	}
	buySignals = []*bool{
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		&[]bool{false}[0],
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
		&[]bool{true}[0],
		nil,
		&[]bool{false}[0],
		nil,
		nil,
		nil,
		nil,
		nil,
		nil,
	}
	open = []float64{
		44.25,
		44.04,
		43.84,
		43.41,
		42.96,
		42.76,
		42.94,
		42.81,
		42.64,
		41.62,
		41.92,
		41.1,
		40.48,
		39.64,
		41.34,
		41.1,
		41.91,
		41.97,
		41.97,
		42.06,
		41.8,
		42.31,
		43,
		42.67,
		43.06,
		42.94,
		41.98,
		41.48,
		42.02,
		41.99,
		42.07,
		41.43,
		41.21,
		40.76,
		40.4,
		40.7,
		41.27,
		41.45,
		41.49,
		42.28,
		42.41,
		41.99,
		41.61,
		39.83,
		39.62,
		39.96,
		40.94,
		40.39,
		40.15,
		39.55,
		38.53,
		38.23,
		37.69,
		36.97,
		36.07,
		35.15,
		35.93,
		38.13,
		38.8,
		39.21,
		38.76,
		39.21,
		39.06,
	}
	high = []float64{
		44.72,
		44.22,
		44.14,
		43.44,
		43.04,
		43.21,
		43.05,
		43.23,
		42.73,
		41.98,
		42.1,
		41.27,
		40.69,
		40.98,
		41.7,
		41.28,
		42.39,
		42.16,
		42.42,
		42.21,
		42.01,
		42.86,
		43.5,
		43.27,
		43.47,
		43.08,
		42.02,
		41.92,
		42.11,
		42.34,
		42.25,
		41.92,
		41.56,
		40.86,
		41.03,
		41.04,
		41.4,
		41.72,
		41.89,
		42.51,
		42.47,
		42.06,
		41.73,
		39.93,
		39.9,
		41.2,
		41.59,
		40.62,
		40.23,
		39.58,
		39.13,
		38.26,
		37.98,
		37.11,
		36.34,
		36.55,
		37.75,
		38.35,
		39.42,
		39.27,
		39.28,
		39.27,
		39.15,
	}
	low = []float64{
		44.14,
		43.8,
		43.57,
		42.59,
		42.65,
		42.73,
		42.54,
		42.39,
		41.95,
		41.27,
		41.17,
		40.48,
		39.56,
		39.45,
		41.23,
		40.79,
		41.67,
		41.56,
		41.79,
		41.79,
		41.53,
		42.13,
		42.62,
		42.44,
		42.69,
		42.43,
		41.4,
		41.25,
		41.54,
		41.94,
		41.77,
		41.31,
		41.12,
		40.46,
		40.39,
		40.51,
		40.97,
		41.16,
		41.46,
		42.1,
		41.91,
		41.52,
		41.4,
		39.19,
		38.87,
		39.8,
		40.75,
		40.04,
		39.81,
		38.77,
		38.08,
		37.5,
		37.3,
		36.24,
		34.88,
		34.9,
		35.87,
		37.66,
		38.49,
		38.6,
		38.61,
		38.78,
		38.78,
	}
	closePrices = []float64{
		44.54,
		43.95,
		43.68,
		43.16,
		42.7,
		43.05,
		42.56,
		43.15,
		41.99,
		41.54,
		41.22,
		40.61,
		40.63,
		40.72,
		41.44,
		41.16,
		42.26,
		41.56,
		42.17,
		42.17,
		41.95,
		42.84,
		42.9,
		43.11,
		43.46,
		42.46,
		41.65,
		41.77,
		41.87,
		42.06,
		41.86,
		41.75,
		41.18,
		40.67,
		40.94,
		40.9,
		41.19,
		41.54,
		41.77,
		42.42,
		42.04,
		41.57,
		41.59,
		39.32,
		39.83,
		40.72,
		41.31,
		40.39,
		39.98,
		38.87,
		38.52,
		37.74,
		37.33,
		36.24,
		34.94,
		35.76,
		37.69,
		38.32,
		39.4,
		39.1,
		39.12,
		38.95,
		38.98,
	}
	volume = []float64{
		4460900,
		6834500,
		4323600,
		7933400,
		6923500,
		4916900,
		4439500,
		8960000,
		6970900,
		7416700,
		5207000,
		8518800,
		10663400,
		9972900,
		11108100,
		6357400,
		5479700,
		5049000,
		4949300,
		4358500,
		7010200,
		7427800,
		7344300,
		6651300,
		7493700,
		6742000,
		8031000,
		5316100,
		4523700,
		5702100,
		5072400,
		5421800,
		6101900,
		8572200,
		5525600,
		4577000,
		4250500,
		4540400,
		3864000,
		5918100,
		5473700,
		6256500,
		3441900,
		13950700,
		14091000,
		12932100,
		7502200,
		8242900,
		6906600,
		10641900,
		12161200,
		10584600,
		9744000,
		12180400,
		16107200,
		17575300,
		14429700,
		15596000,
		10832400,
		10179500,
		7831000,
		3484400,
		5986800,
	}
	bigChaikinResults = floatToBig(chaikinResults)
	bigOpen           = floatToBig(open)
	bigHigh           = floatToBig(high)
	bigLow            = floatToBig(low)
	bigClose          = floatToBig(closePrices)
	bigVolume         = floatToBig(volume)
)

func floatToBig(s []float64) (b []*big.Float) {
	l := len(s)
	b = make([]*big.Float, l)
	for i := 0; i < l; i++ {
		b[i] = big.NewFloat(s[i])
	}
	return b
}
