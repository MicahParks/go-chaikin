package main

import (
	"log"
	"os"

	"github.com/MicahParks/go-ad"

	"github.com/MicahParks/go-chaikin"
)

func main() {
	// Create a logger.
	logger := log.New(os.Stdout, "", 0)

	// Create the initial input.
	initial := [chaikin.LongEMA]ad.Input{}
	for i := 0; i < chaikin.LongEMA; i++ {
		initial[i] = ad.Input{
			Close:  closePrices[i],
			Low:    low[i],
			High:   high[i],
			Volume: volume[i],
		}
	}

	// Create the Chaikin Oscillator data structure as well as its first data point and the corresponding Accumulation
	// Distribution Line point.
	cha, result := chaikin.New(initial)
	logger.Printf("%.4f, %.4f", result.ADLine, result.ChaikinLine)

	// Use every subsequent period's data to calculate the next points on the Chaikin Oscillator and Accumulation
	// Distribution Line.
	var buySignal *bool
	for i := range open[chaikin.LongEMA:] {
		i += chaikin.LongEMA

		result = cha.Calculate(ad.Input{
			Close:  closePrices[i],
			Low:    low[i],
			High:   high[i],
			Volume: volume[i],
		})
		logger.Printf("%.4f, %.4f", result.ADLine, result.ChaikinLine)
		if buySignal != nil {
			if *buySignal {
				logger.Println("Buy.")
			} else {
				logger.Println("Sell.")
			}
		}
	}
}

var (
	open = []float64{
		44.25,
		44.04,
		43.84,
		43.41,
		42.96,
		42.76,
		42.94,
		42.81,
		42.64,
		41.62,
		41.92,
		41.1,
		40.48,
		39.64,
		41.34,
		41.1,
		41.91,
		41.97,
		41.97,
		42.06,
		41.8,
		42.31,
		43,
		42.67,
		43.06,
		42.94,
		41.98,
		41.48,
		42.02,
		41.99,
		42.07,
		41.43,
		41.21,
		40.76,
		40.4,
		40.7,
		41.27,
		41.45,
		41.49,
		42.28,
		42.41,
		41.99,
		41.61,
		39.83,
		39.62,
		39.96,
		40.94,
		40.39,
		40.15,
		39.55,
		38.53,
		38.23,
		37.69,
		36.97,
		36.07,
		35.15,
		35.93,
		38.13,
		38.8,
		39.21,
		38.76,
		39.21,
		39.06,
	}
	high = []float64{
		44.72,
		44.22,
		44.14,
		43.44,
		43.04,
		43.21,
		43.05,
		43.23,
		42.73,
		41.98,
		42.1,
		41.27,
		40.69,
		40.98,
		41.7,
		41.28,
		42.39,
		42.16,
		42.42,
		42.21,
		42.01,
		42.86,
		43.5,
		43.27,
		43.47,
		43.08,
		42.02,
		41.92,
		42.11,
		42.34,
		42.25,
		41.92,
		41.56,
		40.86,
		41.03,
		41.04,
		41.4,
		41.72,
		41.89,
		42.51,
		42.47,
		42.06,
		41.73,
		39.93,
		39.9,
		41.2,
		41.59,
		40.62,
		40.23,
		39.58,
		39.13,
		38.26,
		37.98,
		37.11,
		36.34,
		36.55,
		37.75,
		38.35,
		39.42,
		39.27,
		39.28,
		39.27,
		39.15,
	}
	low = []float64{
		44.14,
		43.8,
		43.57,
		42.59,
		42.65,
		42.73,
		42.54,
		42.39,
		41.95,
		41.27,
		41.17,
		40.48,
		39.56,
		39.45,
		41.23,
		40.79,
		41.67,
		41.56,
		41.79,
		41.79,
		41.53,
		42.13,
		42.62,
		42.44,
		42.69,
		42.43,
		41.4,
		41.25,
		41.54,
		41.94,
		41.77,
		41.31,
		41.12,
		40.46,
		40.39,
		40.51,
		40.97,
		41.16,
		41.46,
		42.1,
		41.91,
		41.52,
		41.4,
		39.19,
		38.87,
		39.8,
		40.75,
		40.04,
		39.81,
		38.77,
		38.08,
		37.5,
		37.3,
		36.24,
		34.88,
		34.9,
		35.87,
		37.66,
		38.49,
		38.6,
		38.61,
		38.78,
		38.78,
	}
	closePrices = []float64{
		44.54,
		43.95,
		43.68,
		43.16,
		42.7,
		43.05,
		42.56,
		43.15,
		41.99,
		41.54,
		41.22,
		40.61,
		40.63,
		40.72,
		41.44,
		41.16,
		42.26,
		41.56,
		42.17,
		42.17,
		41.95,
		42.84,
		42.9,
		43.11,
		43.46,
		42.46,
		41.65,
		41.77,
		41.87,
		42.06,
		41.86,
		41.75,
		41.18,
		40.67,
		40.94,
		40.9,
		41.19,
		41.54,
		41.77,
		42.42,
		42.04,
		41.57,
		41.59,
		39.32,
		39.83,
		40.72,
		41.31,
		40.39,
		39.98,
		38.87,
		38.52,
		37.74,
		37.33,
		36.24,
		34.94,
		35.76,
		37.69,
		38.32,
		39.4,
		39.1,
		39.12,
		38.95,
		38.98,
	}
	volume = []float64{
		4460900,
		6834500,
		4323600,
		7933400,
		6923500,
		4916900,
		4439500,
		8960000,
		6970900,
		7416700,
		5207000,
		8518800,
		10663400,
		9972900,
		11108100,
		6357400,
		5479700,
		5049000,
		4949300,
		4358500,
		7010200,
		7427800,
		7344300,
		6651300,
		7493700,
		6742000,
		8031000,
		5316100,
		4523700,
		5702100,
		5072400,
		5421800,
		6101900,
		8572200,
		5525600,
		4577000,
		4250500,
		4540400,
		3864000,
		5918100,
		5473700,
		6256500,
		3441900,
		13950700,
		14091000,
		12932100,
		7502200,
		8242900,
		6906600,
		10641900,
		12161200,
		10584600,
		9744000,
		12180400,
		16107200,
		17575300,
		14429700,
		15596000,
		10832400,
		10179500,
		7831000,
		3484400,
		5986800,
	}
)
